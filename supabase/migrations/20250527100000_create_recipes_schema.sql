-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";


-- Create recipes table
CREATE TABLE public.recipes (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    title TEXT NOT NULL,
    ingredients TEXT[] NOT NULL, -- Array of ingredients
    steps TEXT[] NOT NULL, -- Array of cooking steps
    meal_type TEXT DEFAULT 'any',
    original_prompt_ingredients TEXT[], -- Original ingredients used to generate the recipe
    refinement_instruction TEXT, -- If this recipe is a refinement, store the instruction
    parent_recipe_id UUID REFERENCES public.recipes(id) ON DELETE SET NULL, -- Reference to original recipe if this is a refinement
    ai_model_used TEXT DEFAULT 'openai/gpt-4.1-nano',
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Add comments for documentation
COMMENT ON TABLE public.recipes IS 'Stores core recipe data generated by AI or refined by users';
COMMENT ON COLUMN public.recipes.parent_recipe_id IS 'Points to original recipe if this is a refinement';

-- Create indexes for better performance
CREATE INDEX idx_recipes_meal_type ON public.recipes(meal_type);
CREATE INDEX idx_recipes_parent_recipe_id ON public.recipes(parent_recipe_id);
CREATE INDEX idx_recipes_created_at ON public.recipes(created_at DESC);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for recipes updated_at
CREATE TRIGGER update_recipes_updated_at
    BEFORE UPDATE ON public.recipes
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

-- RLS Policies for recipes table
ALTER TABLE public.recipes ENABLE ROW LEVEL SECURITY;

-- Anyone can read recipes (public access)
CREATE POLICY "Recipes are publicly readable"
    ON public.recipes
    FOR SELECT
    USING (true);

-- Only service role can insert/update/delete recipes (backend only)
CREATE POLICY "Service role can manage recipes"
    ON public.recipes
    FOR ALL
    TO service_role
    USING (true)
    WITH CHECK (true);

-- Grant necessary permissions
GRANT USAGE ON SCHEMA public TO postgres, anon, authenticated, service_role;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO postgres, supabase_admin;

-- Grant read access to all users
GRANT SELECT ON TABLE public.recipes TO anon, authenticated;

-- Grant full access to service role (for backend operations)
GRANT ALL ON TABLE public.recipes TO service_role; 